{"version":3,"sources":["bodies/hat.js"],"names":["hat","stack","Composite","remove","bodies","length","constraints","lastcos","Math","cos","angle","lastsin","sin","body","Bodies","rectangle","position","x","y","collisionFilter","group","render","sprite","texture","xScale","yScale","label","gravityScale","density","add","Constraint","create","bodyB","bodyA","pointB","pointA","stiffness","visible","angles","angleBStiffness"],"mappings":";AA2CK,SAAA,EAAA,EAAA,GAAA,KAAA,aAAA,GAAA,MAAA,IAAA,UAAA,qCAAA,SAAA,EAAA,EAAA,GAAA,IAAA,IAAA,EAAA,EAAA,EAAA,EAAA,OAAA,IAAA,CAAA,IAAA,EAAA,EAAA,GAAA,EAAA,WAAA,EAAA,aAAA,EAAA,EAAA,cAAA,EAAA,UAAA,IAAA,EAAA,UAAA,GAAA,OAAA,eAAA,EAAA,EAAA,IAAA,IAAA,SAAA,EAAA,EAAA,EAAA,GAAA,OAAA,GAAA,EAAA,EAAA,UAAA,GAAA,GAAA,EAAA,EAAA,GAAA,EA3CCA,IAAAA,EAAAA,WA2CD,SAAA,IAAA,EAAA,KAAA,GAAA,OAAA,EAAA,EAAA,CAAA,CAAA,IAAA,SA1CMC,MAAAA,SAAAA,GACHC,UAAUC,OAAOF,EAAOA,EAAMG,OAAOH,EAAMG,OAAOC,OAAS,IAC3DH,UAAUC,OAAOF,EAAOA,EAAMK,YAAYL,EAAMK,YAAYD,OAAS,MAwCxE,CAAA,IAAA,SAtCMJ,MAAAA,SAAAA,GACGM,IAAAA,EAAUC,KAAKC,IAAIR,EAAMG,OAAOH,EAAMG,OAAOC,OAAS,GAAGK,OACzDC,EAAUH,KAAKI,IAAIX,EAAMG,OAAOH,EAAMG,OAAOC,OAAS,GAAGK,OACzDG,EAAOC,OAAOC,UAAUd,EAAMG,OAAOH,EAAMG,OAAOC,OAAS,GAAGW,SAASC,EAAe,GAAVV,EAAeN,EAAMG,OAAOH,EAAMG,OAAOC,OAAS,GAAGW,SAASE,IAAgB,GAAXP,EAAgB,GAAI,GAAI,CACzKQ,gBAAiB,CAAEC,MAAOA,OAC1BC,OAAQ,CACJC,OAAQ,CACJC,QAAS,cACTC,OAAQ,GACRC,OAAQ,KAGhBC,MAAO,MACPC,cAAe,EACfC,QAAS,OAGPnB,EAAMD,KAAKC,IAAII,EAAKH,OACpBE,EAAMJ,KAAKI,IAAIC,EAAKH,OAC1BR,UAAU2B,IAAI5B,EAAOY,GACrBX,UAAU2B,IAAI5B,EAAO6B,WAAWC,OAAO,CACnCC,MAAOnB,EACPoB,MAAOhC,EAAMG,OAAOH,EAAMG,OAAOC,OAAS,GAC1C6B,OAAQ,CAAEjB,GAAU,GAAPR,EAAY,GAAIS,GAAU,GAAPN,EAAY,IAC5CuB,OAAQ,CAAElB,EAAS,GAANR,EAAW,GAAIS,EAAS,GAANN,EAAW,IAC1CwB,UAAW,EACX/B,OAAQ,EACRgB,OAAQ,CACJgB,SAAS,EACTC,QAAQ,GAOZC,gBAAiB,WAExB,EA3CCvC","file":"hat.101110d8.js","sourceRoot":"..","sourcesContent":["class hat {\r\n    remove(stack) {\r\n        Composite.remove(stack, stack.bodies[stack.bodies.length - 1])\r\n        Composite.remove(stack, stack.constraints[stack.constraints.length - 1])\r\n    }\r\n    create(stack) {\r\n        const lastcos = Math.cos(stack.bodies[stack.bodies.length - 1].angle)\r\n        const lastsin = Math.sin(stack.bodies[stack.bodies.length - 1].angle)\r\n        const body = Bodies.rectangle(stack.bodies[stack.bodies.length - 1].position.x + (lastcos * 40), stack.bodies[stack.bodies.length - 1].position.y - (lastsin * -40), 15, 55, { \r\n            collisionFilter: { group: group },\r\n            render: {\r\n                sprite: {\r\n                    texture: 'img/hat.png',\r\n                    xScale: .6,\r\n                    yScale: .6\r\n                }\r\n            },\r\n            label: 'hat',\r\n            gravityScale: -1,\r\n            density: 0.00001,\r\n            // angle: stack.bodies[stack.bodies.length - 2].angle\r\n        });\r\n        const cos = Math.cos(body.angle)\r\n        const sin = Math.sin(body.angle)\r\n        Composite.add(stack, body)\r\n        Composite.add(stack, Constraint.create({ \r\n            bodyB: body,\r\n            bodyA: stack.bodies[stack.bodies.length - 3],\r\n            pointB: { x: cos * -15 + 19, y: sin * -15 + 24 },\r\n            pointA: { x: cos * 22 - 32, y: sin * 22 - 34 },\r\n            stiffness: 1,\r\n            length: 0,\r\n            render: {\r\n                visible: false,\r\n                angles: false\r\n            },\r\n            // angleAMin:  0.2 + Math.PI / 2,\r\n            // angleAMax: -0.2 + Math.PI / 2,\r\n            // angleAStiffness: 0.01,\r\n            // angleBMin:  0.2 + Math.PI / 2,\r\n            // angleBMax: -0.2 + Math.PI / 2,\r\n            angleBStiffness: .05\r\n        }))\r\n    }\r\n    \r\n}"]}